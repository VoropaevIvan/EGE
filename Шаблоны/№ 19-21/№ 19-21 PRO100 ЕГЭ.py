# Функция определяет, есть ли выигрышная стратегия за количество ходов, которое указано в списке pob
def f(x, c, pob):  # x - количество камней в куче. c - номер текущего хода. pob - список ходов, которыми хотим победить
    if x >= 129:  # Проверяем, что игра закончилась
        return c in pob  # Смотрим, на каком ходу закончилась игра. Если победил наш, то возвращаем истину, иначе - ложь
    if c > max(pob):  # Проверяем, что за нужное количество ходов уже не сможем победить
        return 0  # В таком случае возвращаем ложь
    moves = [f(x + 1, c + 1, pob), f(x * 2, c + 1, pob)]  # Записываем в список все возможные ходы
    if c % 2 != max(pob) % 2:  # Смотрим, кто ходит, мы или противник
        return any(moves)  # Нужно чтобы хотя бы один ход был выигрышным, так как наш ход и мы выбираем куда сходить
    else:
        return all(moves)  # Нужно чтобы все ходы были выигрышными, так как ход противника и он выбирает куда сходит


for s in range(1, 128 + 1):  # Перебираем количество камней в куче
    # Проверяем, что Ваня имеет выигрышную стратегию, позволяющую ему выиграть своим первым ходом
    if f(s, 0, [2]) == 1:
        print('№ 19:', s)
    # Проверяем, что Петя имеет выигрышную стратегию, позволяющую ему выиграть своим вторым ходом
    if f(s, 0, [3]) == 1:
        print('№ 20:', s)
    # Проверяем, что Ваня имеет выигрышную стратегию, позволяющую ему выиграть своим первым или вторым ходом.
    # И при этом, не имеет выигрышной стратегии, позволяющей ему выиграть своим первым ходом
    if f(s, 0, [2, 4]) == 1 and f(s, 0, [2]) == 0:
        print('№ 21:', s)
